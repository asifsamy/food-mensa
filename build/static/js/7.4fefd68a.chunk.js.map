{"version":3,"sources":["components/Dishes/DishItem/NewDishItem.js","components/Dishes/AvailableDishes.js","components/Dishes/DishesSummary.module.css","components/Dishes/DishesSummary.js","components/Dishes/Dishes.js","pages/customer/Home.js"],"names":["NewDishItem","props","useState","isModalOn","setIsModalOn","isAdded","setIsAdded","useHttp","isAdding","isLoading","addError","error","addNewDishItemRequest","sendRequest","hideModalHandler","callNewDishState","addNewDishItemResponse","newDishItem","newDishItemData","generatedId","name","createdDishItem","id","description","price","onAddNewDishItem","console","log","creatNewDishHandler","a","url","method","headers","body","bind","addItemModal","NewDishItemForm","onConfirm","className","classes","actions","Button","buttonStyle","onClick","addingItemModal","LoadingSpinner","addedItemModal","errorAddingModal","invalid","Modal","onClose","AvailableDishes","availableDishes","setAvailableDishes","callNewDish","setCallNewDish","location","useLocation","adminUrl","test","pathname","fetchAvailableDishes","useEffect","dishObj","loadedDishes","key","push","deleteItemHandler","deletedId","newAvailableDishes","index","findIndex","availableDish","splice","dishesList","map","dish","DishItem","onDeleteItem","dishesLoading","fetchDishesError","addDishItemUI","addedNewItem","prevState","concat","type","dishes","Card","module","exports","DishesSummary","summary","Dishes","Home","cartCtx","useContext","CartContext","Helmet","content","cartIsVisible","Cart","hideCart","onHideCart"],"mappings":"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","file":"static/js/7.4fefd68a.chunk.js","sourcesContent":["import { Fragment, useState } from \"react\";\r\nimport useHttp from \"../../../hooks/use-http\";\r\nimport Button from \"../../UI/FormFields/Button\";\r\nimport LoadingSpinner from \"../../UI/LoadingSpinner\";\r\nimport Modal from \"../../UI/Modal\";\r\nimport classes from \"./DishItemActions.module.css\";\r\nimport NewDishItemForm from \"./NewDishItemForm\";\r\n\r\nconst NewDishItem = (props) => {\r\n  const [isModalOn, setIsModalOn] = useState(true);\r\n  const [isAdded, setIsAdded] = useState(false);\r\n\r\n  const {\r\n    isLoading: isAdding,\r\n    error: addError,\r\n    sendRequest: addNewDishItemRequest,\r\n  } = useHttp();\r\n\r\n  const hideModalHandler = () => {\r\n    setIsModalOn(false);\r\n    setIsAdded(false);\r\n    props.callNewDishState(false);\r\n  };\r\n\r\n  const addNewDishItemResponse = (newDishItem, newDishItemData) => {\r\n    setIsAdded(true);\r\n    const generatedId = newDishItemData.name; // firebase-specific => \"name\" contains generated id\r\n    const createdDishItem = {\r\n      id: generatedId,\r\n      name: newDishItem.name,\r\n      description: newDishItem.description,\r\n      price: newDishItem.price,\r\n    };\r\n    props.onAddNewDishItem(createdDishItem);\r\n    console.log(generatedId);\r\n  };\r\n\r\n  const creatNewDishHandler = async (newDishItem) => {\r\n    addNewDishItemRequest(\r\n      {\r\n        url: \"https://mensa-app-80da4-default-rtdb.firebaseio.com/dishes.json\",\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: {\r\n          name: newDishItem.name,\r\n          description: newDishItem.description,\r\n          price: newDishItem.price,\r\n        },\r\n      },\r\n      addNewDishItemResponse.bind(null, newDishItem) // bind() => for pre-configuration\r\n    );\r\n  };\r\n\r\n  // To show the insert form in the modal\r\n  const addItemModal = (\r\n    <Fragment>\r\n      <NewDishItemForm onConfirm={creatNewDishHandler} />\r\n      <div className={classes.actions}>\r\n        <Button buttonStyle=\"button--cancel\" onClick={hideModalHandler}>\r\n          Close\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n\r\n  // immidiately after sending the request\r\n  const addingItemModal = (\r\n    <div className=\"centered\">\r\n      <LoadingSpinner />\r\n    </div>\r\n  );\r\n\r\n  // When the request is sent successfully\r\n  const addedItemModal = (\r\n    <Fragment>\r\n      <p>\r\n        A New Dish Item is added successfully! Reload the page to see changes!\r\n      </p>\r\n      <div className={classes.actions}>\r\n        <Button buttonStyle=\"button--cancel\" onClick={hideModalHandler}>\r\n          Close\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n\r\n  const errorAddingModal = (\r\n    <div className={classes.actions}>\r\n      <p className={classes.invalid}>{addError}</p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {isModalOn && (\r\n        <Modal onClose={hideModalHandler}>\r\n          {!isAdding && !isAdded && addItemModal}\r\n          {isAdding && addingItemModal}\r\n          {!isAdding && isAdded && addedItemModal}\r\n          {addError && errorAddingModal}\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewDishItem;\r\n","import { useState, useEffect, Fragment } from \"react\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport Card from \"../UI/Card\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nimport NewDishItem from \"../../components/Dishes/DishItem/NewDishItem\";\r\nimport classes from \"./AvailableDishes.module.css\";\r\nimport DishItem from \"./DishItem/DishItem\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst AvailableDishes = () => {\r\n  const [availableDishes, setAvailableDishes] = useState([]);\r\n  const [callNewDish, setCallNewDish] = useState(false);\r\n\r\n  const location = useLocation();\r\n  const urlPattern = /admin+\\W*/;\r\n  const adminUrl = urlPattern.test(location.pathname);\r\n\r\n  // Destructuring from useHttp custom hook for processing get request (fetch data)\r\n  const { isLoading, error, sendRequest: fetchAvailableDishes } = useHttp();\r\n\r\n  useEffect(() => {\r\n    const transformDishes = (dishObj) => {\r\n      const loadedDishes = [];\r\n\r\n      for (const key in dishObj) {\r\n        loadedDishes.push({\r\n          id: key,\r\n          name: dishObj[key].name,\r\n          description: dishObj[key].description,\r\n          price: dishObj[key].price,\r\n        });\r\n      }\r\n      setAvailableDishes(loadedDishes);\r\n    };\r\n\r\n    fetchAvailableDishes(\r\n      {\r\n        url: \"https://mensa-app-80da4-default-rtdb.firebaseio.com/dishes.json\",\r\n      },\r\n      transformDishes\r\n    );\r\n  }, [fetchAvailableDishes]);\r\n\r\n  const deleteItemHandler = (deletedId) => {\r\n    const newAvailableDishes = [...availableDishes];\r\n    const index = availableDishes.findIndex(\r\n      (availableDish) => availableDish.id === deletedId\r\n    );\r\n    newAvailableDishes.splice(index, 1);\r\n    setAvailableDishes(newAvailableDishes);\r\n  };\r\n\r\n  const dishesList = availableDishes.map((dish) => (\r\n    <DishItem\r\n      id={dish.id}\r\n      key={dish.id}\r\n      name={dish.name}\r\n      description={dish.description}\r\n      price={dish.price}\r\n      onDeleteItem={deleteItemHandler}\r\n    />\r\n  ));\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section className={classes.dishesLoading}>\r\n        <LoadingSpinner />\r\n      </section>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <section className={classes.fetchDishesError}>\r\n        <p>{error}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const newDishCompHandler = () => {\r\n    setCallNewDish(true);\r\n  };\r\n\r\n  const newDishItemAddedHandler = (addedNewItem) => {\r\n    setAvailableDishes((prevState) => prevState.concat(addedNewItem));\r\n  };\r\n\r\n  // In order to show add item form\r\n  const addDishItemUI = (\r\n    <Fragment>\r\n      {callNewDish && (\r\n        <NewDishItem\r\n          onAddNewDishItem={newDishItemAddedHandler}\r\n          callNewDishState={setCallNewDish}\r\n        />\r\n      )}\r\n      <div className=\"centered\">\r\n        <button\r\n          className=\"uni-button\"\r\n          type=\"button\"\r\n          onClick={newDishCompHandler}\r\n        >\r\n          Add a New Dish Item\r\n        </button>\r\n      </div>\r\n      <h2 className=\"centered\">All Available Dish Items</h2>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      {adminUrl && addDishItemUI}\r\n      <section className={classes.dishes}>\r\n        <Card>\r\n          <ul>{dishesList}</ul>\r\n        </Card>\r\n      </section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AvailableDishes;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summary\":\"DishesSummary_summary__1VeKD\"};","import classes from \"./DishesSummary.module.css\";\r\n\r\nconst DishesSummary = () => {\r\n  return (\r\n    <section className={classes.summary}>\r\n      <h2>Your Food is Ready by Some Clicks</h2>\r\n      <p>\r\n        Choose your favorite dish from our broad selection of available dishes\r\n        and enjoy a delicious lunch or dinner at home.\r\n      </p>\r\n      <p>\r\n        All our dishes are cooked with high-quality ingredients, just-in-time\r\n        and of course by experienced chefs!\r\n      </p>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DishesSummary;\r\n","import { Fragment } from \"react\";\r\nimport AvailableDishes from \"./AvailableDishes\";\r\nimport DishesSummary from \"./DishesSummary\";\r\n\r\nconst Dishes = () => {\r\n  return (\r\n    <Fragment>\r\n      <DishesSummary />\r\n      <AvailableDishes />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Dishes;\r\n","import { Fragment, useContext } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Cart from \"../../components/Cart/Cart\";\r\nimport Dishes from \"../../components/Dishes/Dishes\";\r\nimport CartContext from \"../../store/cart-context\";\r\n\r\nconst Home = (props) => {\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Helmet>\r\n        <title>Food Mensa - Home</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Food Mensa. Order your meal and enjoy delicious food.\"\r\n        />\r\n      </Helmet>\r\n      {cartCtx.cartIsVisible && <Cart hideCart={props.onHideCart} />}\r\n      <Dishes />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}